@startuml
actor Guide

participant RegularTourRequestService as rtrs
participant IRegularTourRequestRepository as irtrr
participant NotificationService as ns
participant INotificationRepository as inr
participant TourService as ts
participant ITourRepository as itr
participant ITourTimeRepository as ittr
participant ITourKeyPointRepository as itkpr
participant ILocationRepository as ilr

loop
Guide -> rtrs : GetValidByParams(Location, GuestNumber, Language, DateRange)
activate rtrs
rtrs -> irtrr : GetValidByParams(Location, GuestNumber, Language, DateRange)
activate irtrr
irtrr --> rtrs : TourRequests
deactivate irtrr
rtrs --> Guide : TourRequests
deactivate rtrs
end

Guide -> rtrs : AcceptRequest(SelectedTourRequest, guideId, DateTime)
activate rtrs

rtrs -> ittr : GetAllInDateRange(guideId, dateRange)
activate ittr
ittr --> rtrs : toursInDateRange
deactivate ittr
opt toursInDateRange.Count != 0
 rtrs -> Guide : null
end
rtrs -> irtrr : Update(request);
activate irtrr
deactivate irtrr

rtrs -> rtrs : CreateTourFromRequest(request, guideId, departureTime)
activate rtrs
return tourFromRequest

rtrs -> ts **: <<create>>
activate ts
rtrs -> ts: Add(tourFromRequest)
ts -> ilr : GetOrAdd(tour.Location)
activate ilr 
ilr --> ts : location
deactivate ilr
ts -> itkpr: AddMultiple(tour.KeyPoints)
activate itkpr
deactivate itkpr
ts -> itr : Add(tour)
activate itr
deactivate itr
ts -> ittr: AddMultiple(tour.DepartureTimes) 
activate ittr
deactivate ittr
ts -> ns **: <<create>>
activate ns
ts-> ns: NotifyGuestsWithSimilarRequests(tour)
deactivate ts
ns -> irtrr: GetInvalidByParams(tour.LocationId, tour.Language)
activate irtrr
irtrr --> ns: similarRequests
deactivate irtrr
loop regularTourRequest in similarRequests
ns -> inr: Add(notification)
activate inr
deactivate inr
end
deactivate ns

rtrs-> inr: Add(notification)
activate inr
deactivate inr
rtrs --> Guide : tourFromRequest
deactivate rtrs 

@enduml